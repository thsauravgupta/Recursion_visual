{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Web\\\\recursion_react\\\\recursion-tree-visualizer (1)\\\\src\\\\context\\\\RecursionContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { algorithmsData } from '../utils/algorithmsData';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  // Code editor state\n  code: '',\n  params: '',\n  globalVars: '',\n  selectedAlgorithm: 'fibonacci',\n  // Execution state\n  isRunning: false,\n  isPaused: false,\n  currentStep: 0,\n  totalSteps: 0,\n  callStack: [],\n  executionSteps: [],\n  // Tree data\n  treeData: null,\n  maxDepth: 0,\n  // Stats\n  statistics: {\n    totalCalls: 0,\n    baseCaseCalls: 0,\n    executionTime: 0\n  },\n  // Error state\n  error: null,\n  // Visualization controls\n  animationSpeed: 1,\n  // Index in animationSpeeds array\n  svgTransform: {\n    scale: 1,\n    x: 0,\n    y: 0\n  }\n};\n\n// Action types\nconst ActionTypes = {\n  SET_CODE: 'SET_CODE',\n  SET_PARAMS: 'SET_PARAMS',\n  SET_GLOBAL_VARS: 'SET_GLOBAL_VARS',\n  SELECT_ALGORITHM: 'SELECT_ALGORITHM',\n  START_EXECUTION: 'START_EXECUTION',\n  PAUSE_EXECUTION: 'PAUSE_EXECUTION',\n  RESET_EXECUTION: 'RESET_EXECUTION',\n  SET_EXECUTION_STEP: 'SET_EXECUTION_STEP',\n  SET_TREE_DATA: 'SET_TREE_DATA',\n  SET_ERROR: 'SET_ERROR',\n  SET_ANIMATION_SPEED: 'SET_ANIMATION_SPEED',\n  UPDATE_SVG_TRANSFORM: 'UPDATE_SVG_TRANSFORM',\n  RESET_SVG_TRANSFORM: 'RESET_SVG_TRANSFORM'\n};\n\n// Reducer function\nfunction recursionReducer(state, action) {\n  var _state$executionSteps;\n  switch (action.type) {\n    case ActionTypes.SET_CODE:\n      return {\n        ...state,\n        code: action.payload\n      };\n    case ActionTypes.SET_PARAMS:\n      return {\n        ...state,\n        params: action.payload\n      };\n    case ActionTypes.SET_GLOBAL_VARS:\n      return {\n        ...state,\n        globalVars: action.payload\n      };\n    case ActionTypes.SELECT_ALGORITHM:\n      {\n        const algorithm = algorithmsData.find(a => a.name.toLowerCase() === action.payload.toLowerCase());\n        return {\n          ...state,\n          selectedAlgorithm: action.payload,\n          code: algorithm.code,\n          params: algorithm.params,\n          globalVars: algorithm.globalVars || ''\n        };\n      }\n    case ActionTypes.START_EXECUTION:\n      return {\n        ...state,\n        isRunning: true,\n        isPaused: false,\n        error: null\n      };\n    case ActionTypes.PAUSE_EXECUTION:\n      return {\n        ...state,\n        isRunning: false,\n        isPaused: true\n      };\n    case ActionTypes.RESET_EXECUTION:\n      return {\n        ...state,\n        isRunning: false,\n        isPaused: false,\n        currentStep: 0,\n        totalSteps: 0,\n        callStack: [],\n        executionSteps: [],\n        treeData: null,\n        maxDepth: 0,\n        statistics: {\n          totalCalls: 0,\n          baseCaseCalls: 0,\n          executionTime: 0\n        },\n        error: null\n      };\n    case ActionTypes.SET_EXECUTION_STEP:\n      return {\n        ...state,\n        currentStep: action.payload,\n        // Update callStack based on the current step\n        callStack: ((_state$executionSteps = state.executionSteps[action.payload]) === null || _state$executionSteps === void 0 ? void 0 : _state$executionSteps.callStack) || []\n      };\n    case ActionTypes.SET_TREE_DATA:\n      return {\n        ...state,\n        treeData: action.payload.treeData,\n        executionSteps: action.payload.executionSteps,\n        totalSteps: action.payload.executionSteps.length,\n        maxDepth: action.payload.maxDepth,\n        statistics: action.payload.statistics,\n        isRunning: false,\n        isPaused: true,\n        currentStep: 0\n      };\n    case ActionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        isRunning: false,\n        isPaused: false\n      };\n    case ActionTypes.SET_ANIMATION_SPEED:\n      return {\n        ...state,\n        animationSpeed: action.payload\n      };\n    case ActionTypes.UPDATE_SVG_TRANSFORM:\n      return {\n        ...state,\n        svgTransform: {\n          ...state.svgTransform,\n          ...action.payload\n        }\n      };\n    case ActionTypes.RESET_SVG_TRANSFORM:\n      return {\n        ...state,\n        svgTransform: {\n          scale: 1,\n          x: 0,\n          y: 0\n        }\n      };\n    default:\n      return state;\n  }\n}\n\n// Create context\nconst RecursionContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport function RecursionProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(recursionReducer, initialState);\n\n  // Animation speeds\n  const animationSpeeds = [{\n    label: '0.5x',\n    value: 2000\n  }, {\n    label: '1x',\n    value: 1000\n  }, {\n    label: '2x',\n    value: 500\n  }, {\n    label: '3x',\n    value: 300\n  }, {\n    label: '5x',\n    value: 100\n  }];\n\n  // Node colors\n  const nodeColors = {\n    active: '#3B82F6',\n    // Blue\n    completed: '#10B981',\n    // Green\n    baseCase: '#EF4444',\n    // Red\n    pending: '#6B7280' // Gray\n  };\n  return /*#__PURE__*/_jsxDEV(RecursionContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      ActionTypes,\n      animationSpeeds,\n      nodeColors\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom hook for using the context\n_s(RecursionProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = RecursionProvider;\nexport function useRecursion() {\n  _s2();\n  const context = useContext(RecursionContext);\n  if (context === undefined) {\n    throw new Error('useRecursion must be used within a RecursionProvider');\n  }\n  return context;\n}\n_s2(useRecursion, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"RecursionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","algorithmsData","jsxDEV","_jsxDEV","initialState","code","params","globalVars","selectedAlgorithm","isRunning","isPaused","currentStep","totalSteps","callStack","executionSteps","treeData","maxDepth","statistics","totalCalls","baseCaseCalls","executionTime","error","animationSpeed","svgTransform","scale","x","y","ActionTypes","SET_CODE","SET_PARAMS","SET_GLOBAL_VARS","SELECT_ALGORITHM","START_EXECUTION","PAUSE_EXECUTION","RESET_EXECUTION","SET_EXECUTION_STEP","SET_TREE_DATA","SET_ERROR","SET_ANIMATION_SPEED","UPDATE_SVG_TRANSFORM","RESET_SVG_TRANSFORM","recursionReducer","state","action","_state$executionSteps","type","payload","algorithm","find","a","name","toLowerCase","length","RecursionContext","RecursionProvider","children","_s","dispatch","animationSpeeds","label","value","nodeColors","active","completed","baseCase","pending","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useRecursion","_s2","context","undefined","Error","$RefreshReg$"],"sources":["D:/Projects/Web/recursion_react/recursion-tree-visualizer (1)/src/context/RecursionContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\nimport { algorithmsData } from '../utils/algorithmsData';\n\n// Initial state\nconst initialState = {\n  // Code editor state\n  code: '',\n  params: '',\n  globalVars: '',\n  selectedAlgorithm: 'fibonacci',\n\n  // Execution state\n  isRunning: false,\n  isPaused: false,\n  currentStep: 0,\n  totalSteps: 0,\n  callStack: [],\n  executionSteps: [],\n\n  // Tree data\n  treeData: null,\n  maxDepth: 0,\n\n  // Stats\n  statistics: {\n    totalCalls: 0,\n    baseCaseCalls: 0,\n    executionTime: 0\n  },\n\n  // Error state\n  error: null,\n\n  // Visualization controls\n  animationSpeed: 1, // Index in animationSpeeds array\n  svgTransform: { scale: 1, x: 0, y: 0 }\n};\n\n// Action types\nconst ActionTypes = {\n  SET_CODE: 'SET_CODE',\n  SET_PARAMS: 'SET_PARAMS',\n  SET_GLOBAL_VARS: 'SET_GLOBAL_VARS',\n  SELECT_ALGORITHM: 'SELECT_ALGORITHM',\n  START_EXECUTION: 'START_EXECUTION',\n  PAUSE_EXECUTION: 'PAUSE_EXECUTION',\n  RESET_EXECUTION: 'RESET_EXECUTION',\n  SET_EXECUTION_STEP: 'SET_EXECUTION_STEP',\n  SET_TREE_DATA: 'SET_TREE_DATA',\n  SET_ERROR: 'SET_ERROR',\n  SET_ANIMATION_SPEED: 'SET_ANIMATION_SPEED',\n  UPDATE_SVG_TRANSFORM: 'UPDATE_SVG_TRANSFORM',\n  RESET_SVG_TRANSFORM: 'RESET_SVG_TRANSFORM'\n};\n\n// Reducer function\nfunction recursionReducer(state, action) {\n  switch (action.type) {\n    case ActionTypes.SET_CODE:\n      return { ...state, code: action.payload };\n\n    case ActionTypes.SET_PARAMS:\n      return { ...state, params: action.payload };\n\n    case ActionTypes.SET_GLOBAL_VARS:\n      return { ...state, globalVars: action.payload };\n\n    case ActionTypes.SELECT_ALGORITHM: {\n      const algorithm = algorithmsData.find(a => a.name.toLowerCase() === action.payload.toLowerCase());\n      return { \n        ...state, \n        selectedAlgorithm: action.payload,\n        code: algorithm.code,\n        params: algorithm.params,\n        globalVars: algorithm.globalVars || ''\n      };\n    }\n\n    case ActionTypes.START_EXECUTION:\n      return { \n        ...state, \n        isRunning: true, \n        isPaused: false,\n        error: null \n      };\n\n    case ActionTypes.PAUSE_EXECUTION:\n      return { ...state, isRunning: false, isPaused: true };\n\n    case ActionTypes.RESET_EXECUTION:\n      return { \n        ...state, \n        isRunning: false, \n        isPaused: false,\n        currentStep: 0,\n        totalSteps: 0,\n        callStack: [],\n        executionSteps: [],\n        treeData: null,\n        maxDepth: 0,\n        statistics: {\n          totalCalls: 0,\n          baseCaseCalls: 0,\n          executionTime: 0\n        },\n        error: null\n      };\n\n    case ActionTypes.SET_EXECUTION_STEP:\n      return { \n        ...state, \n        currentStep: action.payload,\n        // Update callStack based on the current step\n        callStack: state.executionSteps[action.payload]?.callStack || []\n      };\n\n    case ActionTypes.SET_TREE_DATA:\n      return { \n        ...state, \n        treeData: action.payload.treeData,\n        executionSteps: action.payload.executionSteps,\n        totalSteps: action.payload.executionSteps.length,\n        maxDepth: action.payload.maxDepth,\n        statistics: action.payload.statistics,\n        isRunning: false,\n        isPaused: true,\n        currentStep: 0\n      };\n\n    case ActionTypes.SET_ERROR:\n      return { \n        ...state, \n        error: action.payload,\n        isRunning: false,\n        isPaused: false\n      };\n\n    case ActionTypes.SET_ANIMATION_SPEED:\n      return { ...state, animationSpeed: action.payload };\n\n    case ActionTypes.UPDATE_SVG_TRANSFORM:\n      return { \n        ...state, \n        svgTransform: {\n          ...state.svgTransform,\n          ...action.payload\n        }\n      };\n\n    case ActionTypes.RESET_SVG_TRANSFORM:\n      return { \n        ...state, \n        svgTransform: { scale: 1, x: 0, y: 0 }\n      };\n\n    default:\n      return state;\n  }\n}\n\n// Create context\nconst RecursionContext = createContext();\n\n// Provider component\nexport function RecursionProvider({ children }) {\n  const [state, dispatch] = useReducer(recursionReducer, initialState);\n\n  // Animation speeds\n  const animationSpeeds = [\n    { label: '0.5x', value: 2000 },\n    { label: '1x', value: 1000 },\n    { label: '2x', value: 500 },\n    { label: '3x', value: 300 },\n    { label: '5x', value: 100 }\n  ];\n\n  // Node colors\n  const nodeColors = {\n    active: '#3B82F6',  // Blue\n    completed: '#10B981', // Green\n    baseCase: '#EF4444',  // Red\n    pending: '#6B7280'   // Gray\n  };\n\n  return (\n    <RecursionContext.Provider \n      value={{ \n        state, \n        dispatch, \n        ActionTypes,\n        animationSpeeds,\n        nodeColors\n      }}\n    >\n      {children}\n    </RecursionContext.Provider>\n  );\n}\n\n// Custom hook for using the context\nexport function useRecursion() {\n  const context = useContext(RecursionContext);\n  if (context === undefined) {\n    throw new Error('useRecursion must be used within a RecursionProvider');\n  }\n  return context;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}