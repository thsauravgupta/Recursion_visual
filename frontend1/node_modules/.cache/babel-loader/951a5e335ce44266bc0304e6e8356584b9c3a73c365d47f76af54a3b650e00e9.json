{"ast":null,"code":"// Template algorithms for the visualizer\nexport const algorithmsData=[{name:\"Fibonacci\",code:\"function fibonacci(n) {\\n  if (n <= 1) return n;\\n  return fibonacci(n - 1) + fibonacci(n - 2);\\n}\",params:\"5\",description:\"Classic Fibonacci sequence with exponential time complexity\"},{name:\"Factorial\",code:\"function factorial(n) {\\n  if (n <= 1) return 1;\\n  return n * factorial(n - 1);\\n}\",params:\"5\",description:\"Simple factorial calculation with linear time complexity\"},{name:\"Binary Search\",code:\"function binarySearch(arr, target, left = 0, right = arr.length - 1) {\\n  if (left > right) return -1;\\n  const mid = Math.floor((left + right) / 2);\\n  if (arr[mid] === target) return mid;\\n  if (arr[mid] > target) return binarySearch(arr, target, left, mid - 1);\\n  return binarySearch(arr, target, mid + 1, right);\\n}\",params:\"[1,2,3,4,5,6,7,8,9,10], 7\",description:\"Efficient searching algorithm with logarithmic time complexity\"},{name:\"Power Function\",code:\"function power(base, exp) {\\n  if (exp === 0) return 1;\\n  if (exp === 1) return base;\\n  if (exp % 2 === 0) {\\n    const half = power(base, exp / 2);\\n    return half * half;\\n  }\\n  return base * power(base, exp - 1);\\n}\",params:\"2, 10\",description:\"Optimized power calculation using divide and conquer\"},{name:\"GCD (Euclidean)\",code:\"function gcd(a, b) {\\n  if (b === 0) return a;\\n  return gcd(b, a % b);\\n}\",params:\"48, 18\",description:\"Greatest Common Divisor using Euclidean algorithm\"},{name:\"Sum Array\",code:\"function sumArray(arr, index = 0) {\\n  if (index >= arr.length) return 0;\\n  return arr[index] + sumArray(arr, index + 1);\\n}\",params:\"[1, 2, 3, 4, 5]\",description:\"Recursive array summation\"}];","map":{"version":3,"names":["algorithmsData","name","code","params","description"],"sources":["D:/Projects/git/main_vercel/Recursion_visual/frontend1/src/utils/algorithmsData.js"],"sourcesContent":["// Template algorithms for the visualizer\nexport const algorithmsData = [\n  {\n    name: \"Fibonacci\",\n    code: `function fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}`,\n    params: \"5\",\n    description: \"Classic Fibonacci sequence with exponential time complexity\"\n  },\n  {\n    name: \"Factorial\",\n    code: `function factorial(n) {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n}`,\n    params: \"5\",\n    description: \"Simple factorial calculation with linear time complexity\"\n  },\n  {\n    name: \"Binary Search\",\n    code: `function binarySearch(arr, target, left = 0, right = arr.length - 1) {\n  if (left > right) return -1;\n  const mid = Math.floor((left + right) / 2);\n  if (arr[mid] === target) return mid;\n  if (arr[mid] > target) return binarySearch(arr, target, left, mid - 1);\n  return binarySearch(arr, target, mid + 1, right);\n}`,\n    params: \"[1,2,3,4,5,6,7,8,9,10], 7\",\n    description: \"Efficient searching algorithm with logarithmic time complexity\"\n  },\n  {\n    name: \"Power Function\",\n    code: `function power(base, exp) {\n  if (exp === 0) return 1;\n  if (exp === 1) return base;\n  if (exp % 2 === 0) {\n    const half = power(base, exp / 2);\n    return half * half;\n  }\n  return base * power(base, exp - 1);\n}`,\n    params: \"2, 10\",\n    description: \"Optimized power calculation using divide and conquer\"\n  },\n  {\n    name: \"GCD (Euclidean)\",\n    code: `function gcd(a, b) {\n  if (b === 0) return a;\n  return gcd(b, a % b);\n}`,\n    params: \"48, 18\",\n    description: \"Greatest Common Divisor using Euclidean algorithm\"\n  },\n  {\n    name: \"Sum Array\",\n    code: `function sumArray(arr, index = 0) {\n  if (index >= arr.length) return 0;\n  return arr[index] + sumArray(arr, index + 1);\n}`,\n    params: \"[1, 2, 3, 4, 5]\",\n    description: \"Recursive array summation\"\n  }\n];\n"],"mappings":"AAAA;AACA,MAAO,MAAM,CAAAA,cAAc,CAAG,CAC5B,CACEC,IAAI,CAAE,WAAW,CACjBC,IAAI,qGAGN,CACEC,MAAM,CAAE,GAAG,CACXC,WAAW,CAAE,6DACf,CAAC,CACD,CACEH,IAAI,CAAE,WAAW,CACjBC,IAAI,sFAGN,CACEC,MAAM,CAAE,GAAG,CACXC,WAAW,CAAE,0DACf,CAAC,CACD,CACEH,IAAI,CAAE,eAAe,CACrBC,IAAI,mUAMN,CACEC,MAAM,CAAE,2BAA2B,CACnCC,WAAW,CAAE,gEACf,CAAC,CACD,CACEH,IAAI,CAAE,gBAAgB,CACtBC,IAAI,iOAQN,CACEC,MAAM,CAAE,OAAO,CACfC,WAAW,CAAE,sDACf,CAAC,CACD,CACEH,IAAI,CAAE,iBAAiB,CACvBC,IAAI,6EAGN,CACEC,MAAM,CAAE,QAAQ,CAChBC,WAAW,CAAE,mDACf,CAAC,CACD,CACEH,IAAI,CAAE,WAAW,CACjBC,IAAI,gIAGN,CACEC,MAAM,CAAE,iBAAiB,CACzBC,WAAW,CAAE,2BACf,CAAC,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}