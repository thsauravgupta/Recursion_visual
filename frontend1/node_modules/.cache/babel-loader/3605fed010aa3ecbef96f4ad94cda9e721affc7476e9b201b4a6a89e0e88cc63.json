{"ast":null,"code":"import React,{useState}from'react';import{useRecursion}from'../context/RecursionContext';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function InfoPanel(){const{state}=useRecursion();const{callStack,statistics,selectedAlgorithm,currentStep,executionSteps}=state;const[activeTab,setActiveTab]=useState('stack');// Get complexity info based on algorithm\nconst getComplexityInfo=algorithmName=>{const complexityMap={fibonacci:{time:'O(2^n)',space:'O(n)'},factorial:{time:'O(n)',space:'O(n)'},'binary search':{time:'O(log n)',space:'O(log n)'},'power function':{time:'O(log n)',space:'O(log n)'},'gcd (euclidean)':{time:'O(log n)',space:'O(log n)'},'sum array':{time:'O(n)',space:'O(n)'}};const key=algorithmName.toLowerCase();return complexityMap[key]||{time:'Unknown',space:'Unknown'};};const complexity=getComplexityInfo(selectedAlgorithm);const currentStepInfo=executionSteps[currentStep];return/*#__PURE__*/_jsxs(\"div\",{className:\"panel info-panel\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"panel-header\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Execution Details\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"panel-body\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"info-tabs\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"tab-btn \".concat(activeTab==='stack'?'active':''),onClick:()=>setActiveTab('stack'),children:\"Call Stack\"}),/*#__PURE__*/_jsx(\"button\",{className:\"tab-btn \".concat(activeTab==='complexity'?'active':''),onClick:()=>setActiveTab('complexity'),children:\"Complexity\"}),/*#__PURE__*/_jsx(\"button\",{className:\"tab-btn \".concat(activeTab==='stats'?'active':''),onClick:()=>setActiveTab('stats'),children:\"Statistics\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"tab-content\",children:[activeTab==='stack'&&/*#__PURE__*/_jsx(\"div\",{className:\"tab-pane active\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"call-stack\",children:[currentStepInfo&&/*#__PURE__*/_jsx(\"div\",{className:\"step-description\",children:/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Current Step:\"}),\" \",currentStepInfo.description]})}),callStack.length>0?callStack.map((call,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"call-stack-item \".concat(index===0?'active':''),children:call},index)):/*#__PURE__*/_jsx(\"p\",{className:\"empty-state\",children:\"No active function calls\"})]})}),activeTab==='complexity'&&/*#__PURE__*/_jsx(\"div\",{className:\"tab-pane active\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"complexity-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"complexity-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"complexity-label\",children:\"Time Complexity:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"complexity-value\",children:complexity.time})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"complexity-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"complexity-label\",children:\"Space Complexity:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"complexity-value\",children:complexity.space})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"complexity-description\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Analysis:\"}),/*#__PURE__*/_jsx(\"p\",{children:getComplexityDescription(selectedAlgorithm,complexity)})]})]})}),activeTab==='stats'&&/*#__PURE__*/_jsx(\"div\",{className:\"tab-pane active\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"statistics-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Total Calls:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:statistics.totalCalls})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Base Case Calls:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:statistics.baseCaseCalls})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Execution Time:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[statistics.executionTime,\"ms\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Efficiency:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:statistics.totalCalls>0?\"\".concat((statistics.baseCaseCalls/statistics.totalCalls*100).toFixed(1),\"%\"):'N/A'})]})]})})]})]})]});}function getComplexityDescription(algorithmName,complexity){const descriptions={fibonacci:\"The naive recursive Fibonacci has exponential time complexity because it recalculates the same subproblems multiple times. Each call branches into two more calls, creating a binary tree of exponential size.\",factorial:\"Factorial has linear time and space complexity because it makes exactly n recursive calls, one for each number from n down to 1.\",'binary search':\"Binary Search has logarithmic complexity because it eliminates half of the search space with each recursive call.\",'power function':\"The optimized power function uses divide-and-conquer to achieve logarithmic complexity by squaring intermediate results.\",'gcd (euclidean)':\"The Euclidean algorithm for GCD has logarithmic complexity based on the properties of the modulo operation.\",'sum array':\"Array summation has linear complexity as it visits each element exactly once.\"};return descriptions[algorithmName.toLowerCase()]||\"This algorithm has \".concat(complexity.time,\" time complexity and \").concat(complexity.space,\" space complexity.\");}export default InfoPanel;","map":{"version":3,"names":["React","useState","useRecursion","jsx","_jsx","jsxs","_jsxs","InfoPanel","state","callStack","statistics","selectedAlgorithm","currentStep","executionSteps","activeTab","setActiveTab","getComplexityInfo","algorithmName","complexityMap","fibonacci","time","space","factorial","key","toLowerCase","complexity","currentStepInfo","className","children","concat","onClick","description","length","map","call","index","getComplexityDescription","totalCalls","baseCaseCalls","executionTime","toFixed","descriptions"],"sources":["D:/Projects/git/main_vercel/Recursion_visual/frontend1/src/components/InfoPanel.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useRecursion } from '../context/RecursionContext';\n\nfunction InfoPanel() {\n  const { state } = useRecursion();\n  const { callStack, statistics, selectedAlgorithm, currentStep, executionSteps } = state;\n  const [activeTab, setActiveTab] = useState('stack');\n\n  // Get complexity info based on algorithm\n  const getComplexityInfo = (algorithmName) => {\n    const complexityMap = {\n      fibonacci: { time: 'O(2^n)', space: 'O(n)' },\n      factorial: { time: 'O(n)', space: 'O(n)' },\n      'binary search': { time: 'O(log n)', space: 'O(log n)' },\n      'power function': { time: 'O(log n)', space: 'O(log n)' },\n      'gcd (euclidean)': { time: 'O(log n)', space: 'O(log n)' },\n      'sum array': { time: 'O(n)', space: 'O(n)' }\n    };\n\n    const key = algorithmName.toLowerCase();\n    return complexityMap[key] || { time: 'Unknown', space: 'Unknown' };\n  };\n\n  const complexity = getComplexityInfo(selectedAlgorithm);\n  const currentStepInfo = executionSteps[currentStep];\n\n  return (\n    <div className=\"panel info-panel\">\n      <div className=\"panel-header\">\n        <h3>Execution Details</h3>\n      </div>\n\n      <div className=\"panel-body\">\n        <div className=\"info-tabs\">\n          <button\n            className={`tab-btn ${activeTab === 'stack' ? 'active' : ''}`}\n            onClick={() => setActiveTab('stack')}\n          >\n            Call Stack\n          </button>\n          <button\n            className={`tab-btn ${activeTab === 'complexity' ? 'active' : ''}`}\n            onClick={() => setActiveTab('complexity')}\n          >\n            Complexity\n          </button>\n          <button\n            className={`tab-btn ${activeTab === 'stats' ? 'active' : ''}`}\n            onClick={() => setActiveTab('stats')}\n          >\n            Statistics\n          </button>\n        </div>\n\n        <div className=\"tab-content\">\n          {activeTab === 'stack' && (\n            <div className=\"tab-pane active\">\n              <div className=\"call-stack\">\n                {currentStepInfo && (\n                  <div className=\"step-description\">\n                    <p><strong>Current Step:</strong> {currentStepInfo.description}</p>\n                  </div>\n                )}\n\n                {callStack.length > 0 ? (\n                  callStack.map((call, index) => (\n                    <div \n                      key={index} \n                      className={`call-stack-item ${index === 0 ? 'active' : ''}`}\n                    >\n                      {call}\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"empty-state\">No active function calls</p>\n                )}\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'complexity' && (\n            <div className=\"tab-pane active\">\n              <div className=\"complexity-info\">\n                <div className=\"complexity-item\">\n                  <span className=\"complexity-label\">Time Complexity:</span>\n                  <span className=\"complexity-value\">{complexity.time}</span>\n                </div>\n\n                <div className=\"complexity-item\">\n                  <span className=\"complexity-label\">Space Complexity:</span>\n                  <span className=\"complexity-value\">{complexity.space}</span>\n                </div>\n\n                <div className=\"complexity-description\">\n                  <h4>Analysis:</h4>\n                  <p>{getComplexityDescription(selectedAlgorithm, complexity)}</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'stats' && (\n            <div className=\"tab-pane active\">\n              <div className=\"statistics-info\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Total Calls:</span>\n                  <span className=\"stat-value\">{statistics.totalCalls}</span>\n                </div>\n\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Base Case Calls:</span>\n                  <span className=\"stat-value\">{statistics.baseCaseCalls}</span>\n                </div>\n\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Execution Time:</span>\n                  <span className=\"stat-value\">{statistics.executionTime}ms</span>\n                </div>\n\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Efficiency:</span>\n                  <span className=\"stat-value\">\n                    {statistics.totalCalls > 0 \n                      ? `${((statistics.baseCaseCalls / statistics.totalCalls) * 100).toFixed(1)}%`\n                      : 'N/A'\n                    }\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction getComplexityDescription(algorithmName, complexity) {\n  const descriptions = {\n    fibonacci: \"The naive recursive Fibonacci has exponential time complexity because it recalculates the same subproblems multiple times. Each call branches into two more calls, creating a binary tree of exponential size.\",\n    factorial: \"Factorial has linear time and space complexity because it makes exactly n recursive calls, one for each number from n down to 1.\",\n    'binary search': \"Binary Search has logarithmic complexity because it eliminates half of the search space with each recursive call.\",\n    'power function': \"The optimized power function uses divide-and-conquer to achieve logarithmic complexity by squaring intermediate results.\",\n    'gcd (euclidean)': \"The Euclidean algorithm for GCD has logarithmic complexity based on the properties of the modulo operation.\",\n    'sum array': \"Array summation has linear complexity as it visits each element exactly once.\"\n  };\n\n  return descriptions[algorithmName.toLowerCase()] || \n    `This algorithm has ${complexity.time} time complexity and ${complexity.space} space complexity.`;\n}\n\nexport default InfoPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}